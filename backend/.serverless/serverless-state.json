{
  "service": {
    "service": "eps-serverless",
    "serviceObject": {
      "name": "eps-serverless"
    },
    "provider": {
      "stage": "dev",
      "region": "us-east-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "timeout": 30,
      "environment": {
        "NODE_ENV": "dev",
        "DB_NAME": "eps-test",
        "DB_USER": "nodeuser",
        "DB_PASSWORD": "F2GS_+tw4Se7$Qt2",
        "DB_HOST": "eps-test.copg0vm8oufq.us-east-1.rds.amazonaws.com",
        "DB_PORT": 3306
      },
      "vpc": {
        "securityGroupIds": [
          "sg-0a6d091e4a586525d"
        ],
        "subnetIds": [
          "subnet-0a9dd5b354a947079",
          "subnet-0acab148c0ca2ae4d",
          "subnet-0f771e12857650fc7",
          "subnet-018ae6e41aea45732"
        ]
      },
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "HealthCheckLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/eps-serverless-dev-healthCheck"
            }
          },
          "CreateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/eps-serverless-dev-create"
            }
          },
          "GetOneLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/eps-serverless-dev-getOne"
            }
          },
          "GetAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/eps-serverless-dev-getAll"
            }
          },
          "UpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/eps-serverless-dev-update"
            }
          },
          "DestroyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/eps-serverless-dev-destroy"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "eps-serverless",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/eps-serverless-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/eps-serverless-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "eps-serverless",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "HealthCheckLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/eps-serverless/dev/1561677825568-2019-06-27T23:23:45.568Z/eps-serverless.zip"
              },
              "FunctionName": "eps-serverless-dev-healthCheck",
              "Handler": "handler.healthCheck",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DB_NAME": "eps-test",
                  "DB_USER": "nodeuser",
                  "DB_PASSWORD": "F2GS_+tw4Se7$Qt2",
                  "DB_HOST": "eps-test.copg0vm8oufq.us-east-1.rds.amazonaws.com",
                  "DB_PORT": 3306
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-0a6d091e4a586525d"
                ],
                "SubnetIds": [
                  "subnet-0a9dd5b354a947079",
                  "subnet-0acab148c0ca2ae4d",
                  "subnet-0f771e12857650fc7",
                  "subnet-018ae6e41aea45732"
                ]
              }
            },
            "DependsOn": [
              "HealthCheckLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "HealthCheckLambdaVersionfJcGMPsKaoIZMtsUnd2VhMuNh8S4KCdT6CdN4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HealthCheckLambdaFunction"
              },
              "CodeSha256": "rHhv1gGLbUXEWq+0KVB2fQIz/8rhBQxRkKUMClJz8DA="
            }
          },
          "CreateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/eps-serverless/dev/1561677825568-2019-06-27T23:23:45.568Z/eps-serverless.zip"
              },
              "FunctionName": "eps-serverless-dev-create",
              "Handler": "handler.create",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DB_NAME": "eps-test",
                  "DB_USER": "nodeuser",
                  "DB_PASSWORD": "F2GS_+tw4Se7$Qt2",
                  "DB_HOST": "eps-test.copg0vm8oufq.us-east-1.rds.amazonaws.com",
                  "DB_PORT": 3306
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-0a6d091e4a586525d"
                ],
                "SubnetIds": [
                  "subnet-0a9dd5b354a947079",
                  "subnet-0acab148c0ca2ae4d",
                  "subnet-0f771e12857650fc7",
                  "subnet-018ae6e41aea45732"
                ]
              }
            },
            "DependsOn": [
              "CreateLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateLambdaVersionH3YMcZdCQD3OJdVIoVMHunJlSAL9ysazN7ttSgvDI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateLambdaFunction"
              },
              "CodeSha256": "rHhv1gGLbUXEWq+0KVB2fQIz/8rhBQxRkKUMClJz8DA="
            }
          },
          "GetOneLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/eps-serverless/dev/1561677825568-2019-06-27T23:23:45.568Z/eps-serverless.zip"
              },
              "FunctionName": "eps-serverless-dev-getOne",
              "Handler": "handler.getOne",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DB_NAME": "eps-test",
                  "DB_USER": "nodeuser",
                  "DB_PASSWORD": "F2GS_+tw4Se7$Qt2",
                  "DB_HOST": "eps-test.copg0vm8oufq.us-east-1.rds.amazonaws.com",
                  "DB_PORT": 3306
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-0a6d091e4a586525d"
                ],
                "SubnetIds": [
                  "subnet-0a9dd5b354a947079",
                  "subnet-0acab148c0ca2ae4d",
                  "subnet-0f771e12857650fc7",
                  "subnet-018ae6e41aea45732"
                ]
              }
            },
            "DependsOn": [
              "GetOneLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetOneLambdaVersionjkN6oErwjXI6aq1kDKfL7lmy8n1OXcLIvUObBM0sc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOneLambdaFunction"
              },
              "CodeSha256": "rHhv1gGLbUXEWq+0KVB2fQIz/8rhBQxRkKUMClJz8DA="
            }
          },
          "GetAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/eps-serverless/dev/1561677825568-2019-06-27T23:23:45.568Z/eps-serverless.zip"
              },
              "FunctionName": "eps-serverless-dev-getAll",
              "Handler": "handler.getAll",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DB_NAME": "eps-test",
                  "DB_USER": "nodeuser",
                  "DB_PASSWORD": "F2GS_+tw4Se7$Qt2",
                  "DB_HOST": "eps-test.copg0vm8oufq.us-east-1.rds.amazonaws.com",
                  "DB_PORT": 3306
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-0a6d091e4a586525d"
                ],
                "SubnetIds": [
                  "subnet-0a9dd5b354a947079",
                  "subnet-0acab148c0ca2ae4d",
                  "subnet-0f771e12857650fc7",
                  "subnet-018ae6e41aea45732"
                ]
              }
            },
            "DependsOn": [
              "GetAllLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAllLambdaVersionpj4jicW2Heg5go94hYNFb7yo9yyXW621uuMAPnLk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllLambdaFunction"
              },
              "CodeSha256": "rHhv1gGLbUXEWq+0KVB2fQIz/8rhBQxRkKUMClJz8DA="
            }
          },
          "UpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/eps-serverless/dev/1561677825568-2019-06-27T23:23:45.568Z/eps-serverless.zip"
              },
              "FunctionName": "eps-serverless-dev-update",
              "Handler": "handler.update",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DB_NAME": "eps-test",
                  "DB_USER": "nodeuser",
                  "DB_PASSWORD": "F2GS_+tw4Se7$Qt2",
                  "DB_HOST": "eps-test.copg0vm8oufq.us-east-1.rds.amazonaws.com",
                  "DB_PORT": 3306
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-0a6d091e4a586525d"
                ],
                "SubnetIds": [
                  "subnet-0a9dd5b354a947079",
                  "subnet-0acab148c0ca2ae4d",
                  "subnet-0f771e12857650fc7",
                  "subnet-018ae6e41aea45732"
                ]
              }
            },
            "DependsOn": [
              "UpdateLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "UpdateLambdaVersionuHqhiC6BkFCiaZ3Es0metpu7WCLIjFaOnRFkNiiRcM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateLambdaFunction"
              },
              "CodeSha256": "rHhv1gGLbUXEWq+0KVB2fQIz/8rhBQxRkKUMClJz8DA="
            }
          },
          "DestroyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/eps-serverless/dev/1561677825568-2019-06-27T23:23:45.568Z/eps-serverless.zip"
              },
              "FunctionName": "eps-serverless-dev-destroy",
              "Handler": "handler.destroy",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DB_NAME": "eps-test",
                  "DB_USER": "nodeuser",
                  "DB_PASSWORD": "F2GS_+tw4Se7$Qt2",
                  "DB_HOST": "eps-test.copg0vm8oufq.us-east-1.rds.amazonaws.com",
                  "DB_PORT": 3306
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-0a6d091e4a586525d"
                ],
                "SubnetIds": [
                  "subnet-0a9dd5b354a947079",
                  "subnet-0acab148c0ca2ae4d",
                  "subnet-0f771e12857650fc7",
                  "subnet-018ae6e41aea45732"
                ]
              }
            },
            "DependsOn": [
              "DestroyLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "DestroyLambdaVersionvoCFlADAjJO5NdSx1bUrugPpScXjNNVjKFmGZBIbbw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DestroyLambdaFunction"
              },
              "CodeSha256": "rHhv1gGLbUXEWq+0KVB2fQIz/8rhBQxRkKUMClJz8DA="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-eps-serverless",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceDepartments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "departments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDepartmentsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDepartments"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDepartmentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDepartments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDepartmentsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDepartmentsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HealthCheckLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDepartmentsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDepartments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDepartmentsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDepartmentsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOneLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDepartmentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDepartments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDepartmentsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDepartmentsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDepartmentsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDepartmentsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1561677817777": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodDepartmentsOptions",
              "ApiGatewayMethodDepartmentsIdVarOptions",
              "ApiGatewayMethodGet",
              "ApiGatewayMethodDepartmentsPost",
              "ApiGatewayMethodDepartmentsIdVarGet",
              "ApiGatewayMethodDepartmentsGet",
              "ApiGatewayMethodDepartmentsIdVarPut",
              "ApiGatewayMethodDepartmentsIdVarDelete"
            ]
          },
          "HealthCheckLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HealthCheckLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOneLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOneLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DestroyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DestroyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "HealthCheckLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HealthCheckLambdaVersionfJcGMPsKaoIZMtsUnd2VhMuNh8S4KCdT6CdN4"
            }
          },
          "CreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateLambdaVersionH3YMcZdCQD3OJdVIoVMHunJlSAL9ysazN7ttSgvDI"
            }
          },
          "GetOneLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOneLambdaVersionjkN6oErwjXI6aq1kDKfL7lmy8n1OXcLIvUObBM0sc"
            }
          },
          "GetAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllLambdaVersionpj4jicW2Heg5go94hYNFb7yo9yyXW621uuMAPnLk"
            }
          },
          "UpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateLambdaVersionuHqhiC6BkFCiaZ3Es0metpu7WCLIjFaOnRFkNiiRcM"
            }
          },
          "DestroyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DestroyLambdaVersionvoCFlADAjJO5NdSx1bUrugPpScXjNNVjKFmGZBIbbw"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "secrets": {
        "DB_NAME": "eps-test",
        "DB_USER": "nodeuser",
        "DB_PASSWORD": "F2GS_+tw4Se7$Qt2",
        "DB_HOST": "eps-test.copg0vm8oufq.us-east-1.rds.amazonaws.com",
        "DB_PORT": 3306,
        "NODE_ENV": "dev",
        "SECURITY_GROUP_ID": "sg-0a6d091e4a586525d",
        "SUBNET1_ID": "subnet-0a9dd5b354a947079",
        "SUBNET2_ID": "subnet-0acab148c0ca2ae4d",
        "SUBNET3_ID": "subnet-0f771e12857650fc7",
        "SUBNET4_ID": "subnet-018ae6e41aea45732"
      }
    },
    "pluginsData": {},
    "functions": {
      "healthCheck": {
        "handler": "handler.healthCheck",
        "events": [
          {
            "http": {
              "path": "",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "eps-serverless-dev-healthCheck",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "create": {
        "handler": "handler.create",
        "events": [
          {
            "http": {
              "path": "departments",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "eps-serverless-dev-create",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "getOne": {
        "handler": "handler.getOne",
        "events": [
          {
            "http": {
              "path": "departments/{id}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "eps-serverless-dev-getOne",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "getAll": {
        "handler": "handler.getAll",
        "events": [
          {
            "http": {
              "path": "departments",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "eps-serverless-dev-getAll",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "update": {
        "handler": "handler.update",
        "events": [
          {
            "http": {
              "path": "departments/{id}",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "eps-serverless-dev-update",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "destroy": {
        "handler": "handler.destroy",
        "events": [
          {
            "http": {
              "path": "departments/{id}",
              "method": "delete",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "eps-serverless-dev-destroy",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs8.10",
        "vpc": {}
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "C:\\Users\\maxba\\CloudStuff\\eps-serverless\\.serverless\\eps-serverless.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/eps-serverless/dev/1561677825568-2019-06-27T23:23:45.568Z",
    "artifact": "eps-serverless.zip"
  }
}